import os
import gdown
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image

def predict_sales(model, day, month, year, weekday, temperature, fuel_price, cpi, unemployment):
    input_data = np.array([[day, month, year, weekday, temperature, fuel_price, cpi, unemployment]])
    prediction = model.predict(input_data)
    return prediction[0]

def preprocess_image(img):
    img = img.resize((224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
    return img_array

def predict_image(img, model):
    img_array = preprocess_image(img)
    predictions = model.predict(img_array)
    predicted_class_index = np.argmax(predictions[0])
    class_names = ['cloudy', 'rainy', 'shine', 'sunrise']
    return class_names[predicted_class_index]

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
rf_model = joblib.load("./random_forest_model.pkl")
lr_model = joblib.load("./linear_regression_model.pkl")
file_id = '1mMivV3wmO9u00yWt0tXbIMY7OTEhYKv7'

# Output file path
output_path = 'nn_model.h5'

# Download the file from Google Drive
url = f'https://drive.google.com/uc?id={file_id}'
gdown.download(url, output_path, quiet=False)

# Load the model
if os.path.exists(output_path):
    nn_model = load_model(output_path)
else:
    st.error("Failed to download the model file.")

# UI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ Streamlit
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏≥‡∏ó‡∏≤‡∏á")
page = st.sidebar.radio("‡πÑ‡∏õ‡∏ó‡∏µ‡πà", ["‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡πÇ‡∏°‡πÄ‡∏î‡∏•", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Random Forest", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Linear Regression", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Neural Network", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"])

if page == "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
    st.title("üîÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ & ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    
    st.markdown("""
    ## üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®!
    
    ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Machine Learning ‡πÅ‡∏•‡∏∞ Deep Learning ‡πÄ‡∏û‡∏∑‡πà‡∏≠:
    
    ### üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    - ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• **Random Forest** ‡πÅ‡∏•‡∏∞ **Linear Regression** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    
    ### üå§Ô∏è ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
    - ‡πÉ‡∏ä‡πâ **Convolutional Neural Network (CNN)** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    
    ### üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ:
    1. **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡πÇ‡∏°‡πÄ‡∏î‡∏•** - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    2. **‡∏ó‡∏î‡∏™‡∏≠‡∏ö Random Forest** - ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Random Forest
    3. **‡∏ó‡∏î‡∏™‡∏≠‡∏ö Linear Regression** - ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô
    4. **‡∏ó‡∏î‡∏™‡∏≠‡∏ö Neural Network** - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏ß‡∏¢ CNN
    """)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üõí ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        chart_data = pd.DataFrame({
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': ['1 ‡∏°.‡∏Ñ.', '8 ‡∏°.‡∏Ñ.', '15 ‡∏°.‡∏Ñ.', '22 ‡∏°.‡∏Ñ.', '29 ‡∏°.‡∏Ñ.'],
            '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á': [24000, 26000, 25000, 28000, 27000],
            '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢': [23500, 26200, 24800, 28500, 27200]
        })
        chart_data = chart_data.melt('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', var_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', value_name='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢')
        st.line_chart(chart_data.set_index('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'))
    
    with col2:
        st.subheader("üå¶Ô∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
        st.info("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô: ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å, ‡∏ù‡∏ô‡∏ï‡∏Å, ‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î, ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô")
        # ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

elif page == "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡πÇ‡∏°‡πÄ‡∏î‡∏•":
    st.title("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write("### ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    st.write("### ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
    st.write("1. Random Forest Regressor - ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à")
    st.write("2. Linear Regression - ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    st.write("3. Neural Network - ‡πÉ‡∏ä‡πâ CNN ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")

elif page == "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Random Forest":
    st.title("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Random Forest")
    day = st.number_input("‡∏ß‡∏±‡∏ô", min_value=1, max_value=31, value=1)
    month = st.number_input("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", min_value=1, max_value=12, value=1)
    year = st.number_input("‡∏õ‡∏µ", min_value=2000, max_value=2030, value=2023)
    weekday = st.number_input("‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (0=‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, 6=‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)", min_value=0, max_value=6, value=0)
    temperature = st.number_input("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", value=25.0)
    fuel_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", value=3.5)
    cpi = st.number_input("CPI", value=200.0)
    unemployment = st.number_input("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô", value=5.0)
    
    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"):
        prediction = predict_sales(rf_model, day, month, year, weekday, temperature, fuel_price, cpi, unemployment)
        st.write(f"### ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: ${prediction:,.2f}")

elif page == "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Linear Regression":
    st.title("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Linear Regression")
    day = st.number_input("‡∏ß‡∏±‡∏ô", min_value=1, max_value=31, value=1)
    month = st.number_input("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", min_value=1, max_value=12, value=1)
    year = st.number_input("‡∏õ‡∏µ", min_value=2000, max_value=2030, value=2023)
    weekday = st.number_input("‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (0=‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, 6=‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)", min_value=0, max_value=6, value=0)
    temperature = st.number_input("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", value=25.0)
    fuel_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", value=3.5)
    cpi = st.number_input("CPI", value=200.0)
    unemployment = st.number_input("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô", value=5.0)
    
    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"):
        prediction = predict_sales(lr_model, day, month, year, weekday, temperature, fuel_price, cpi, unemployment)
        st.write(f"### ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: ${prediction:,.2f}")

elif page == "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Neural Network":
    st.title("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        img = Image.open(uploaded_file)
        st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)
        prediction = predict_image(img, nn_model)
        st.write(f"### ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {prediction}")

elif page == "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï":
    st.title("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï & ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
        
    st.header("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("### ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    st.write("‡∏ó‡∏µ‡πà‡∏°‡∏≤: [Walmart Sales Data Analysis](https://github.com/Kash1r/Walmart-Sales-Data-Analysis)")
    st.write("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô, CPI, ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô")
    
    st.write("### ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 2: ‡∏†‡∏≤‡∏û‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    st.write("‡∏ó‡∏µ‡πà‡∏°‡∏≤: [Multi-class Weather Dataset](https://www.kaggle.com/datasets/janmejaybhoi/multi-class-weather-dataset)")
    st.write("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å, ‡∏ù‡∏ô‡∏ï‡∏Å, ‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î, ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô")
    
    st.header("‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
    st.write("### ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ")
    st.markdown("""
    - **Streamlit**: ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    - **Pandas & NumPy**: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - **Scikit-learn**: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning (Random Forest, Linear Regression)
    - **TensorFlow/Keras**: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network
    - **Pillow**: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û
    - **Joblib**: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning
    """)
